import talib
import numpy as np
import pandas as pd
from indicators.talib_wrapper import calculate_sma


def calculate_indicators(df: pd.DataFrame) -> pd.DataFrame:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ DataFrame –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:
    - EMA 50 / EMA 200 (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞)
    - RSI (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å / –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)
    - MACD (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ç—Ä–µ–Ω–¥–∞)
    - OBV (–æ–±—ä—ë–º)
    - ATR (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
    """
    close = df['close'].values.astype(float)
    high = df['high'].values.astype(float)
    low = df['low'].values.astype(float)
    volume = df['volume'].values.astype(float)

    df['ema_50'] = talib.EMA(close, timeperiod=50)
    df['ema_200'] = talib.EMA(close, timeperiod=200)
    df['rsi'] = talib.RSI(close, timeperiod=14)

    macd, macd_signal, macd_hist = talib.MACD(close, fastperiod=12, slowperiod=26, signalperiod=9)
    df['macd'] = macd
    df['macd_signal'] = macd_signal
    df['macd_hist'] = macd_hist

    df['obv'] = talib.OBV(close, volume)
    df['atr'] = talib.ATR(high, low, close, timeperiod=14)

    return df


def check_entry_signal(df: pd.DataFrame) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –≤—Ö–æ–¥ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ:
    - —Ç—Ä–µ–Ω–¥ –ø–æ EMA
    - –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –ø–æ RSI
    - –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD
    - –∑–Ω–∞—á–µ–Ω–∏–µ ATR (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
    """
    last = df.iloc[-1]
    prev = df.iloc[-2]

    signal = {}

    # –¢—Ä–µ–Ω–¥
    if last['ema_50'] > last['ema_200']:
        signal['trend'] = 'long'
    elif last['ema_50'] < last['ema_200']:
        signal['trend'] = 'short'

    # RSI
    if last['rsi'] > 70:
        signal['rsi'] = 'overbought'
    elif last['rsi'] < 30:
        signal['rsi'] = 'oversold'

    # MACD –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    if prev['macd'] < prev['macd_signal'] and last['macd'] > last['macd_signal']:
        signal['macd_cross'] = 'bullish'
    elif prev['macd'] > prev['macd_signal'] and last['macd'] < last['macd_signal']:
        signal['macd_cross'] = 'bearish'

    # ATR
    signal['atr'] = round(last['atr'], 2)

    return signal


def check_sma_crossover(df: pd.DataFrame, short_period=9, long_period=21) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö (SMA):
    - SMA short > SMA long ‚Üí —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
    - SMA short < SMA long ‚Üí —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    """
    df["SMA_Short"] = calculate_sma(df["close"], short_period)
    df["SMA_Long"] = calculate_sma(df["close"], long_period)

    if df["SMA_Short"].iloc[-1] > df["SMA_Long"].iloc[-1]:
        return "üöÄ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É (–±—ã—á–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä)"
    elif df["SMA_Short"].iloc[-1] < df["SMA_Long"].iloc[-1]:
        return "üìâ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–º–µ–¥–≤–µ–∂–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä)"
    else:
        return "‚öñÔ∏è –ù–µ—Ç —á—ë—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"
